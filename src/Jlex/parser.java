
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 11 20:06:04 CST 2021
//----------------------------------------------------

package Jlex;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue May 11 20:06:04 CST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\010" +
    "\004\000\002\010\003\000\002\010\003\000\002\007\005" +
    "\000\002\011\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\006\000\002\012\010\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\011\000\002\017\015\000\002\020\013\000\002\022\006" +
    "\000\002\021\003\000\002\021\004\000\002\023\011\000" +
    "\002\024\020\000\002\025\014\000\002\026\003\000\002" +
    "\026\004\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\024\031\017\032\024\034\013\040\012\042" +
    "\006\045\027\047\022\053\026\056\023\001\002\000\032" +
    "\002\ufffe\005\ufffe\031\017\032\024\034\013\040\012\042" +
    "\006\045\027\047\022\050\ufffe\053\026\056\023\001\002" +
    "\000\032\002\ufff7\005\ufff7\031\ufff7\032\ufff7\034\ufff7\040" +
    "\ufff7\042\ufff7\045\ufff7\047\ufff7\050\ufff7\053\ufff7\056\ufff7" +
    "\001\002\000\004\004\167\001\002\000\032\002\ufff9\005" +
    "\ufff9\031\ufff9\032\ufff9\034\ufff9\040\ufff9\042\ufff9\045\ufff9" +
    "\047\ufff9\050\ufff9\053\ufff9\056\ufff9\001\002\000\032\002" +
    "\ufffc\005\ufffc\031\ufffc\032\ufffc\034\ufffc\040\ufffc\042\ufffc" +
    "\045\ufffc\047\ufffc\050\ufffc\053\ufffc\056\ufffc\001\002\000" +
    "\004\002\166\001\002\000\004\056\150\001\002\000\004" +
    "\004\136\001\002\000\032\002\ufff4\005\ufff4\031\ufff4\032" +
    "\ufff4\034\ufff4\040\ufff4\042\ufff4\045\ufff4\047\ufff4\050\ufff4" +
    "\053\ufff4\056\ufff4\001\002\000\032\002\ufff5\005\ufff5\031" +
    "\ufff5\032\ufff5\034\ufff5\040\ufff5\042\ufff5\045\ufff5\047\ufff5" +
    "\050\ufff5\053\ufff5\056\ufff5\001\002\000\032\002\ufffb\005" +
    "\ufffb\031\ufffb\032\ufffb\034\ufffb\040\ufffb\042\ufffb\045\ufffb" +
    "\047\ufffb\050\ufffb\053\ufffb\056\ufffb\001\002\000\004\056" +
    "\115\001\002\000\032\002\ufff3\005\ufff3\031\ufff3\032\ufff3" +
    "\034\ufff3\040\ufff3\042\ufff3\045\ufff3\047\ufff3\050\ufff3\053" +
    "\ufff3\056\ufff3\001\002\000\004\002\000\001\002\000\004" +
    "\056\102\001\002\000\032\002\ufff8\005\ufff8\031\ufff8\032" +
    "\ufff8\034\ufff8\040\ufff8\042\ufff8\045\ufff8\047\ufff8\050\ufff8" +
    "\053\ufff8\056\ufff8\001\002\000\010\004\073\051\075\052" +
    "\074\001\002\000\032\002\ufff6\005\ufff6\031\ufff6\032\ufff6" +
    "\034\ufff6\040\ufff6\042\ufff6\045\ufff6\047\ufff6\050\ufff6\053" +
    "\ufff6\056\ufff6\001\002\000\032\002\ufffa\005\ufffa\031\ufffa" +
    "\032\ufffa\034\ufffa\040\ufffa\042\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\053\ufffa\056\ufffa\001\002\000\004\004\030\001\002" +
    "\000\004\031\032\001\002\000\004\005\041\001\002\000" +
    "\004\056\033\001\002\000\010\051\037\054\036\056\034" +
    "\001\002\000\032\002\ufff0\005\ufff0\031\ufff0\032\ufff0\034" +
    "\ufff0\040\ufff0\042\ufff0\045\ufff0\047\ufff0\050\ufff0\053\ufff0" +
    "\056\ufff0\001\002\000\032\002\uffef\005\uffef\031\uffef\032" +
    "\uffef\034\uffef\040\uffef\042\uffef\045\uffef\047\uffef\050\uffef" +
    "\053\uffef\056\uffef\001\002\000\032\002\ufff1\005\ufff1\031" +
    "\ufff1\032\ufff1\034\ufff1\040\ufff1\042\ufff1\045\ufff1\047\ufff1" +
    "\050\ufff1\053\ufff1\056\ufff1\001\002\000\004\056\040\001" +
    "\002\000\032\002\ufff2\005\ufff2\031\ufff2\032\ufff2\034\ufff2" +
    "\040\ufff2\042\ufff2\045\ufff2\047\ufff2\050\ufff2\053\ufff2\056" +
    "\ufff2\001\002\000\004\004\042\001\002\000\006\051\046" +
    "\054\045\001\002\000\004\005\063\001\002\000\024\013" +
    "\051\014\055\015\050\016\054\017\057\025\053\026\061" +
    "\027\052\030\060\001\002\000\042\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\021\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\001\002\000\004\056\047\001\002\000\042\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\006\051\uffdd\054\uffdd\001" +
    "\002\000\006\051\uffe0\054\uffe0\001\002\000\006\051\uffda" +
    "\054\uffda\001\002\000\006\051\uffdc\054\uffdc\001\002\000" +
    "\006\051\uffdf\054\uffdf\001\002\000\006\051\uffde\054\uffde" +
    "\001\002\000\006\051\046\054\045\001\002\000\006\051" +
    "\uffe1\054\uffe1\001\002\000\006\051\uffd9\054\uffd9\001\002" +
    "\000\006\051\uffdb\054\uffdb\001\002\000\004\005\uffe2\001" +
    "\002\000\004\004\064\001\002\000\004\046\065\001\002" +
    "\000\004\056\066\001\002\000\004\005\067\001\002\000" +
    "\004\004\070\001\002\000\024\031\017\032\024\034\013" +
    "\040\012\042\006\045\027\047\022\053\026\056\023\001" +
    "\002\000\004\005\072\001\002\000\032\002\uffd1\005\uffd1" +
    "\031\uffd1\032\uffd1\034\uffd1\040\uffd1\042\uffd1\045\uffd1\047" +
    "\uffd1\050\uffd1\053\uffd1\056\uffd1\001\002\000\024\031\017" +
    "\032\024\034\013\040\012\042\006\045\027\047\022\053" +
    "\026\056\023\001\002\000\032\002\uffec\005\uffec\031\uffec" +
    "\032\uffec\034\uffec\040\uffec\042\uffec\045\uffec\047\uffec\050" +
    "\uffec\053\uffec\056\uffec\001\002\000\004\056\076\001\002" +
    "\000\032\002\uffee\005\uffee\031\uffee\032\uffee\034\uffee\040" +
    "\uffee\042\uffee\045\uffee\047\uffee\050\uffee\053\uffee\056\uffee" +
    "\001\002\000\004\005\101\001\002\000\004\005\uffcd\001" +
    "\002\000\032\002\uffeb\005\uffeb\031\uffeb\032\uffeb\034\uffeb" +
    "\040\uffeb\042\uffeb\045\uffeb\047\uffeb\050\uffeb\053\uffeb\056" +
    "\uffeb\001\002\000\004\004\103\001\002\000\004\056\104" +
    "\001\002\000\006\005\uffcf\056\104\001\002\000\004\005" +
    "\106\001\002\000\004\004\107\001\002\000\024\031\017" +
    "\032\024\034\013\040\012\042\006\045\027\047\022\053" +
    "\026\056\023\001\002\000\004\050\111\001\002\000\010" +
    "\051\037\054\036\056\034\001\002\000\004\005\113\001" +
    "\002\000\032\002\uffd0\005\uffd0\031\uffd0\032\uffd0\034\uffd0" +
    "\040\uffd0\042\uffd0\045\uffd0\047\uffd0\050\uffd0\053\uffd0\056" +
    "\uffd0\001\002\000\004\005\uffce\001\002\000\014\020\117" +
    "\051\037\052\116\054\036\056\034\001\002\000\032\002" +
    "\uffed\005\uffed\031\uffed\032\uffed\034\uffed\040\uffed\042\uffed" +
    "\045\uffed\047\uffed\050\uffed\053\uffed\056\uffed\001\002\000" +
    "\004\033\120\001\002\000\006\051\046\054\045\001\002" +
    "\000\014\006\126\007\127\010\124\011\130\012\125\001" +
    "\002\000\004\021\123\001\002\000\032\002\uffea\005\uffea" +
    "\031\uffea\032\uffea\034\uffea\040\uffea\042\uffea\045\uffea\047" +
    "\uffea\050\uffea\053\uffea\056\uffea\001\002\000\006\051\046" +
    "\054\045\001\002\000\006\051\046\054\045\001\002\000" +
    "\006\051\046\054\045\001\002\000\006\051\046\054\045" +
    "\001\002\000\006\051\046\054\045\001\002\000\004\021" +
    "\uffe6\001\002\000\004\021\uffe8\001\002\000\004\021\uffe9" +
    "\001\002\000\004\021\uffe5\001\002\000\004\021\uffe7\001" +
    "\002\000\006\051\046\054\045\001\002\000\004\005\140" +
    "\001\002\000\004\004\141\001\002\000\024\031\017\032" +
    "\024\034\013\040\012\042\006\045\027\047\022\053\026" +
    "\056\023\001\002\000\004\005\143\001\002\000\034\002" +
    "\uffd8\005\uffd8\031\uffd8\032\uffd8\034\uffd8\036\144\040\uffd8" +
    "\042\uffd8\045\uffd8\047\uffd8\050\uffd8\053\uffd8\056\uffd8\001" +
    "\002\000\004\004\145\001\002\000\024\031\017\032\024" +
    "\034\013\040\012\042\006\045\027\047\022\053\026\056" +
    "\023\001\002\000\004\005\147\001\002\000\032\002\uffd7" +
    "\005\uffd7\031\uffd7\032\uffd7\034\uffd7\040\uffd7\042\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\053\uffd7\056\uffd7\001\002\000\004" +
    "\004\151\001\002\000\004\052\152\001\002\000\004\004" +
    "\163\001\002\000\004\041\156\001\002\000\006\041\uffd4" +
    "\052\152\001\002\000\004\041\uffd3\001\002\000\004\004" +
    "\157\001\002\000\024\031\017\032\024\034\013\040\012" +
    "\042\006\045\027\047\022\053\026\056\023\001\002\000" +
    "\004\005\161\001\002\000\004\005\162\001\002\000\032" +
    "\002\uffd6\005\uffd6\031\uffd6\032\uffd6\034\uffd6\040\uffd6\042" +
    "\uffd6\045\uffd6\047\uffd6\050\uffd6\053\uffd6\056\uffd6\001\002" +
    "\000\024\031\017\032\024\034\013\040\012\042\006\045" +
    "\027\047\022\053\026\056\023\001\002\000\004\005\165" +
    "\001\002\000\006\041\uffd5\052\uffd5\001\002\000\004\002" +
    "\001\001\002\000\006\051\046\054\045\001\002\000\004" +
    "\005\171\001\002\000\004\004\172\001\002\000\024\031" +
    "\017\032\024\034\013\040\012\042\006\045\027\047\022" +
    "\053\026\056\023\001\002\000\004\005\174\001\002\000" +
    "\032\002\uffd2\005\uffd2\031\uffd2\032\uffd2\034\uffd2\040\uffd2" +
    "\042\uffd2\045\uffd2\047\uffd2\050\uffd2\053\uffd2\056\uffd2\001" +
    "\002\000\010\002\uffff\005\uffff\050\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\030\003\010\004\020\006\003\007\007\011" +
    "\015\012\006\017\004\020\024\023\014\024\013\025\017" +
    "\001\001\000\026\004\174\006\003\007\007\011\015\012" +
    "\006\017\004\020\024\023\014\024\013\025\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\043\015\042\001\001\000\002" +
    "\001\001\000\004\016\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\070\006" +
    "\003\007\007\011\015\012\006\017\004\020\024\023\014" +
    "\024\013\025\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\077\006\003\007\007\011\015\012\006" +
    "\017\004\020\024\023\014\024\013\025\017\027\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\104\001\001\000\004\026\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\107\006\003\007\007\011\015\012\006\017\004\020\024" +
    "\023\014\024\013\025\017\001\001\000\002\001\001\000" +
    "\004\010\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\121\014\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\134\001\001\000\004\014\133\001\001\000\004" +
    "\014\132\001\001\000\004\014\131\001\001\000\004\014" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\043\015\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\141\006\003\007\007\011\015\012\006\017" +
    "\004\020\024\023\014\024\013\025\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\145\006\003\007\007\011\015\012\006\017\004\020\024" +
    "\023\014\024\013\025\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\152\022\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\154\022\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\157\006\003\007\007\011\015\012\006\017" +
    "\004\020\024\023\014\024\013\025\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\163\006\003\007\007\011\015\012\006\017\004\020\024" +
    "\023\014\024\013\025\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\043\015\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\172\006\003\007\007\011\015\012\006\017\004\020\024" +
    "\023\014\024\013\025\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
	}
	
	 public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left + 1) +
        " Posicion "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) { 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left+ 1)+ " Posicion "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRAGRUPADA ::= expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*EXPRAGRUPADA*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARGUMENTOS ::= IDENTIFICADOR ARGUMENTOS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARGUMENTOS ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRPROC ::= PROC IDENTIFICADOR LLA ARGUMENTOS LLC LLA expr_list RETURN VALOR LLC 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*INSTRPROC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRFOR ::= FOR LLA DECLARACION LLC LLA TEST LLC LLA INCR IDENTIFICADOR LLC LLA expr_list LLC 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*INSTRFOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRWHILE ::= WHILE LLA TEST LLC LLA expr_list LLC 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*INSTRWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRCASE ::= CASE INSTRCASE 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*INSTRCASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRCASE ::= CASE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*INSTRCASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASE ::= AGRUPACION LLA expr_list LLC 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*CASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTSWITCH ::= SWITCH IDENTIFICADOR LLA INSTRCASE DEFAULT LLA expr_list LLC LLC 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*INSTSWITCH*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRIF ::= IF LLA TEST LLC LLA expr_list LLC ELSE LLA expr_list LLC 
            {
              Object RESULT = null;
		 System.out.println("Sentencia analizada correctamente. Sin errores."); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*INSTRIF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRIF ::= IF LLA TEST LLC LLA expr_list LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*INSTRIF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERRELACIONAL ::= NI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERRELACIONAL ::= IN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERRELACIONAL ::= NE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERRELACIONAL ::= EQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERRELACIONAL ::= MENORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERRELACIONAL ::= MAYOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERRELACIONAL ::= MAYORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERRELACIONAL ::= MENOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERRELACIONAL ::= IGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TEST ::= OPERANDO OPERRELACIONAL OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*TEST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERANDO ::= DIGITO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OPERANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERANDO ::= ASIG IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OPERANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= OPERANDO MOD OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= OPERANDO DIVISION OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION ::= OPERANDO MULTIPLICACION OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION ::= OPERANDO MENOS OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACION ::= OPERANDO MAS OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AGRUPACIONES ::= SET IDENTIFICADOR CA EXPR OPERACION CC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AGRUPACIONES ::= PUTS LLA EXPRAGRUPADA LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AGRUPACIONES ::= PUTS AGRUPACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AGRUPACIONES ::= SET IDENTIFICADOR AGRUPACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ACCEDERVALOR ::= PUTS ASIG IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ACCEDERVALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= SET IDENTIFICADOR VALOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOR ::= DIGITO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALOR ::= ASIG IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= INSTRPROC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= INSTRFOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= INSTRWHILE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= INSTSWITCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= INSTRIF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= AGRUPACIONES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= COMENTARIO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= ACCEDERVALOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println(" = "+e+";"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*ini*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

